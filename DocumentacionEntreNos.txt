========================================================================================================================================================

Para ejecutar el proyecto:
"mvn spring-boot:run"

========================================================================================================================================================
Para tu caso con PostgreSQL <- Tenemos que acomodar esto bien, son solo ejemplos
"application.properties"

src/main/resources/application.properties

CONFIGURACI√ìN DE POSTGRESQL
spring.datasource.url=jdbc:postgresql://localhost:5432/nautica
spring.datasource.username=postgres
spring.datasource.password=tu_password

CONFIGURACI√ìN JPA / HIBERNATE
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Puerto de la aplicaci√≥n
server.port=8080

spring.datasource.url ‚Üí conexi√≥n a tu base PostgreSQL.
spring.datasource.username y password ‚Üí credenciales de la DB.
spring.jpa.hibernate.ddl-auto=update ‚Üí crea o actualiza tablas seg√∫n tus entidades.
spring.jpa.show-sql=true ‚Üí muestra las consultas SQL en la consola (√∫til en desarrollo).
server.port=8080 ‚Üí puerto donde corre tu backend.

========================================================================================================================================================

Estructura

src/main/java/com/tuempresa/tuapp/
 ‚îú‚îÄ‚îÄ controllers/      <-- Controladores REST
 ‚îÇ      ClienteController.java
 ‚îú‚îÄ‚îÄ models/           <-- Entidades JPA (tablas DB)
 ‚îÇ      Cliente.java
 ‚îú‚îÄ‚îÄ services/         <-- L√≥gica de negocio
 ‚îÇ      ClienteService.java
 ‚îú‚îÄ‚îÄ repositories/     <-- Interfaces para DB
 ‚îÇ      ClienteRepository.java
 ‚îî‚îÄ‚îÄ TuAppApplication.java  <-- Clase principal (main)

========================================================================================================================================================

Capa	    | Anotaci√≥n	                | Qu√© hace
Modelo  	| @Entity	                | Representa tablas en DB
Repositorio	| Extiende JpaRepository	| Acceso a la base de datos
Servicio	| @Service	                | L√≥gica de negocio
Controlador	| @RestController	        | Expone endpoints REST
Aplicaci√≥n	| @SpringBootApplication	| Punto de entrada de la app

========================================================================================================================================================

Como manejar los response de la api. 404, 200, 204, 500, Estructura

Entender `ResponseEntity` y los c√≥digos de estado HTTP es clave para hacer APIs limpias y profesionales.
Te explico en orden üëá

---

 üîπ ¬øQu√© es `ResponseEntity`?

Es una clase de Spring que te permite **construir la respuesta HTTP completa**:

* el **cuerpo** (lo que devuelves: JSON, String, objeto, etc.)
* el **status code** (200, 201, 404, 500‚Ä¶)
* los **headers** (opcional: Location, Authorization, etc.)

Ejemplo b√°sico:

```java
@GetMapping("/{id}")
public ResponseEntity<Usuario> obtener(@PathVariable Long id) {
    Usuario usuario = service.obtener(id);
    return ResponseEntity.ok(usuario); // 200 OK con el usuario en el body
}
```

---

 üîπ Principales c√≥digos de estado HTTP

Te los divido por categor√≠as para que sepas cu√°ndo usarlos üëá

 ‚úÖ 2xx ‚Äì √âxito

200 OK** ‚Üí Operaci√≥n exitosa (GET, PUT, DELETE).
201 Created** ‚Üí Se cre√≥ un recurso (POST). Generalmente se usa junto con un `Location` header que indica la URL del nuevo recurso.
204 No Content** ‚Üí Operaci√≥n exitosa pero sin body (por ejemplo, al eliminar algo).

 ‚ö†Ô∏è 4xx ‚Äì Error del cliente

400 Bad Request** ‚Üí El cliente mand√≥ datos inv√°lidos (ej: JSON mal formado, validaci√≥n que no pasa, enum inv√°lido).
401 Unauthorized** ‚Üí No est√° autenticado (le falta login o token).
403 Forbidden** ‚Üí Est√° autenticado, pero **no tiene permisos**.
404 Not Found** ‚Üí No existe el recurso (ej: `/usuarios/99` y no hay ese ID).
409 Conflict** ‚Üí Conflicto con el estado actual (ej: insertar un DNI que ya existe en DB).

 üí• 5xx ‚Äì Error del servidor

500 Internal Server Error** ‚Üí Algo inesperado fall√≥ en el servidor (NullPointerException, error en DB, etc.).
503 Service Unavailable** ‚Üí El servicio no est√° disponible (poco com√∫n en APIs REST simples, m√°s usado en balanceadores).

---

 üîπ Ejemplos con `ResponseEntity`

 GET (200 OK o 404 Not Found)

```java
@GetMapping("/{id}")
public ResponseEntity<Usuario> obtener(@PathVariable Long id) {
    return service.findById(id)
        .map(ResponseEntity::ok) // 200 + usuario
        .orElseGet(() -> ResponseEntity.notFound().build()); // 404
}
```

 POST (201 Created o 409 Conflict)

```java
@PostMapping
public ResponseEntity<Usuario> crear(@RequestBody Usuario usuario) {
    if (service.existsByDni(usuario.getDni())) {
        return ResponseEntity.status(HttpStatus.CONFLICT)
                             .body(null); // 409 Conflict
    }
    Usuario creado = service.crear(usuario);
    return ResponseEntity.status(HttpStatus.CREATED).body(creado); // 201
}
```

 DELETE (204 No Content o 404 Not Found)

```java
@DeleteMapping("/{id}")
public ResponseEntity<Void> eliminar(@PathVariable Long id) {
    if (!service.existsById(id)) {
        return ResponseEntity.notFound().build();
    }
    service.eliminar(id);
    return ResponseEntity.noContent().build(); // 204
}
```

---

 üîπ Resumen r√°pido (qu√© usar en cada caso)

| Acci√≥n                             | Status recomendado            |
| ---------------------------------- | ----------------------------- |
| GET ok                             | **200 OK**                    |
| GET recurso no existe              | **404 Not Found**             |
| POST exitoso (crear)               | **201 Created**               |
| POST con datos inv√°lidos           | **400 Bad Request**           |
| POST duplicado (ej: DNI ya existe) | **409 Conflict**              |
| PUT/PATCH exitoso                  | **200 OK**                    |
| DELETE exitoso                     | **204 No Content**            |
| Error inesperado (server)          | **500 Internal Server Error** |

---

üëâ La idea es: **4xx culpa del cliente** (mand√≥ algo mal), **5xx culpa del servidor** (fall√≥ nuestro c√≥digo o infra).

---


