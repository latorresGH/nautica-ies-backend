dale, checklist para ma√±ana üëá

# Prioridades

1. **Seguridad (URLs libres vs protegidas por JWT)**

* En `SecurityConfig`:

  * `permitAll()` para:

    * `POST /api/auth/login`
    * (si lo ten√©s) `POST /api/auth/refresh`
    * opcional: `/actuator/health`, `/swagger-ui/**`, `/v3/api-docs/**`
  * `authenticated()` para todo lo dem√°s: `anyRequest().authenticated()`
  * Registrar `JwtAuthenticationFilter` antes de `UsernamePasswordAuthenticationFilter`
  * Configurar CORS si vas a pegarle desde el front.

2. **Roles y autorizaci√≥n**

* Mapear reglas por rol (cuando agregues Admin real):

  * `hasRole("admin")` para `POST/PUT/DELETE /api/usuarios/**`
  * `hasAnyRole("admin","operario")` para listados/consultas internas
  * `hasAnyRole("admin","operario","cliente")` para endpoints ‚Äúself‚Äù si correspondiera
* Asegurar que `RolUsuario` ‚Üî claims del JWT coincidan (prefijo `ROLE_` si us√°s `hasRole`).

3. **Entidad Administrador**

* Crear `Administrador extends Usuario` (JOINED como el resto).
* Decidir campos propios (legajo/√°rea/lo que necesites).
* Actualizar `UsuarioController#crear` para instanciar `Administrador` cuando `rol="admin"`.
* Ajustar reglas de seguridad para admin.

4. **Validaciones y consistencia**

* `UsuarioCreateRequest`:

  * Mantener `numCliente` **obligatorio** cuando `rol="cliente"`.
  * Setear por defecto en el controlador de cliente:

    * `estadoCliente = ACTIVO`
    * `tipoCliente = cliente`
* Confirmar que `Usuario.activo` es `BOOLEAN` (ya ok) y que el repo/queries **no** intentan leerlo como `byte`.
* Repass de enums (`EstadoCliente`, `TipoCliente`, `RolUsuario`) en DB como `VARCHAR` (EnumType.STRING) y datos en may√∫sculas si quer√©s uniformidad.

5. **Errores y mensajes**

* En `ApiExceptionHandler`, separar:

  * `DataIntegrityViolationException` ‚Üí 409 con mensaje de campo duplicado.
  * `MethodArgumentNotValidException` ‚Üí 400 con errores de validaci√≥n.
  * `ResourceNotFoundException` ‚Üí 404.
  * `AccessDeniedException`/`AuthenticationException` ‚Üí 403/401.

6. **Migraciones DB**

* Agregar/ajustar migraciones (Flyway/Liquibase) para:

  * `clientes.estado_cliente NOT NULL`
  * `clientes.tipo_cliente NOT NULL`
  * √≠ndices √∫nicos (`usuarios.correo`, `usuarios.dni`, `clientes.num_cliente`)

---

# Tests que te conviene escribir

**Unit tests (JUnit + Mockito)**

* `UsuarioService`:

  * `crear()` encripta contrase√±a y guarda.
  * Rechaza duplicados (simular `DataIntegrityViolationException`).
  * `actualizar()` no pisa contrase√±a si viene null/vac√≠a.
  * `buscarPorCorreo()` cuando existe / cuando no.

**Web layer (MockMvc)**

* `POST /api/auth/login`:

  * 200 con credenciales v√°lidas.
  * 401 inv√°lidas.
* `POST /api/usuarios`:

  * 201 cliente v√°lido con `numCliente`.
  * 400 sin `numCliente` cuando rol=cliente.
  * 409 duplicados `dni/correo/numCliente`.
  * 401/403 sin token / sin rol.

**Integraci√≥n (Testcontainers + PostgreSQL)**

* Crear usuario cliente ‚Üí persiste en `usuarios` y `clientes` (campos por defecto ok).
* Login + usar token para crear usuario (flujo completo).
* B√∫squeda por correo trae correctamente JOIN de subclases.

---

# Endpoints actuales (confirmados por tu c√≥digo)

**Auth**

* `POST /api/auth/login` ‚Äì devuelve JWT (accessToken y posiblemente refreshToken).

**Usuarios**

* `GET /api/usuarios` ‚Äì listado paginado
  Par√°metros: `page`, `size`, `sort` (ej: `apellido,asc`)
* `GET /api/usuarios/{id}` ‚Äì obtener por id
* `GET /api/usuarios/by-correo?correo=...` ‚Äì obtener por correo
* `POST /api/usuarios` ‚Äì crear usuario

  * Campos comunes (`nombre`, `apellido`, `correo`, `contrasena`, `dni`, `telefono`, `direccion`, `localidad`, `provincia`, `rol`, `activo`)
  * Si `rol="cliente"`: **requiere** `numCliente` y setea por defecto `estadoCliente=ACTIVO`, `tipoCliente=cliente`, `fechaAlta=now()`
* `PUT /api/usuarios/{id}` ‚Äì actualizar
* `DELETE /api/usuarios/{id}` ‚Äì eliminar

> *Nota:* Vi consultas a `embarcaciones` en logs, pero no tenemos controlador expuesto aqu√≠; lo dejar√≠a fuera hasta que lo confirmes.

---

# Sugerencias r√°pidas (quality-of-life)

* Documentar con OpenAPI/Swagger (springdoc) y dejar `/swagger-ui/**` p√∫blico.
* A√±adir `@JsonProperty(access = WRITE_ONLY)` a `contrasena` (ya lo ten√©s en `Usuario`).
* Devolver DTOs al crear/listar (no la entidad completa) para no exponer campos sensibles ni relaciones perezosas.
* A√±adir `@JsonIgnoreProperties({"hibernateLazyInitializer","handler"})` (ya est√° en `Usuario`).

Si quer√©s, ma√±ana te paso un `SecurityConfig` base con `permitAll`/`authenticated`, y ejemplos de tests con MockMvc y Testcontainers listos para pegar. üò¥üõå
